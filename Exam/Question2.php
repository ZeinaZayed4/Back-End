<?php

// 1
function fibonacci($num) {
    $fibonacci_series = array();
    if ($num > 0) {
        $fibonacci_series[] = 0;
    }
    if ($num > 1) {
        $fibonacci_series[] = 1;
    }
    for ($i = 2; $i < $num; $i++) {
        $fibonacci_series[] = $fibonacci_series[$i - 1] + $fibonacci_series[$i -2];
    }
    return $fibonacci_series;
}
$fib = fibonacci(10);
echo '<pre>';
print_r($fib);
echo '</pre>';
echo '----------------<br>';

// 2
function isLeap($year)
{
    if ($year % 4 == 0) {
        if ($year % 100 == 0) {
            if ($year % 400 == 0) {
                return true;
            } else {
                return false;
            }
        } else {
            return true;
        }
    } else {
        return false;
    }
}
$year = 2023;
if (isLeap($year)) {
    echo $year . " is a leap year.<br>";
} else {
    echo $year . " is not a leap year.<br>";
}
echo '----------------<br>';

// 3
function random($min, $max, $count)
{
    $range = range($min, $max);
    shuffle($range);

    return array_slice($range, 0, $count);
}
$minRange = 1;
$maxRange = 100;
$numberOfRandomNumbers = 10;

$randomNumbers = random($minRange, $maxRange, $numberOfRandomNumbers);
echo '<pre>';
print_r($randomNumbers);
echo '</pre>';
echo '----------------<br>';

// 4
for ($i = 1; $i <= 5; $i++) {
    for ($j = 1; $j <= 9; $j++) {
        if ($i == 5 && $j == 6) {
            break;
        }
        echo "$i * $j = " . ($i * $j) . '<br>';
    }
}
echo '----------------<br>';

// 5
$arr = [2, 1, 3, 4, 5, 2, 4, 8, 8];
sort($arr);
$unique = array_unique($arr);
echo '<pre>';
print_r($arr);
print_r($unique);
echo '</pre>';
echo '----------------<br>';

// 6
class Animal {
    private string $name;
    public function __construct(string $name) {
        $this->name = $name;
    }
    public function toString() {
        return "Animal [name = $this->name]";
    }
}

class Mammal extends Animal {
    public function __construct(string $name)
    {
        Animal::__construct($name);
    }
    public function toString()
    {
        return "Mammal[" . Animal::toString() . "]"; // TODO: Change the autogenerated stub
    }
}

class Cat extends Mammal {
    public function __construct(string $name)
    {
        Mammal::__construct($name);
    }
    public function greets() : void {
        echo "Meow<br>";
    }
    public function toString()
    {
        return "Cat[" . Mammal::toString() . "]";
    }
}

class Dog extends Mammal {
    public function __construct(string $name)
    {
        Mammal::__construct($name);
    }
    public function greets() : void {
        echo "Woof<br>";
    }
    public function toString()
    {
        return "Dog[" . Mammal::toString() . "]";
    }
}

$animal = new Animal("Simba");
echo $animal->toString();
echo '<br>';

$mammal = new Mammal("Luna");
echo $mammal->toString();
echo '<br>';

$cat = new Cat("Bella");
echo $cat->toString();
echo '<br>';
$cat->greets();

$dog = new Dog("Max");
echo $dog->toString();
echo '<br>';
$dog->greets();
